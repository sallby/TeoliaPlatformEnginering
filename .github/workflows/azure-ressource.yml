name: Apply resources Azure

on:
  workflow_dispatch:
    inputs:
      localisation:
        description: 'Localisation de la ressource'
        required: true
      nomRessource:
        description: 'Nom de la ressource'
        required: true

jobs:
  terraform:
    runs-on: ubuntu-latest

    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      
    steps:
      - name: Checkout Github Repo
        uses: actions/checkout@v4
        
      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init

      - name: Terraform Validate
        working-directory: ./terraform
        run: terraform validate

      - name: Check if resource group already exists
        working-directory: ./terraform
        id: check_rg
        run: |
          existing_rg=$(az group show --name "${{ github.event.inputs.nomRessource }}" --subscription "${{ secrets.AZURE_SUBSCRIPTION_ID }}" --query 'name' -o tsv || echo "")
          echo "::set-output name=exists::$(if [[ -n "$existing_rg" ]]; then echo "true"; else echo "false"; fi)"

      - name: Terraform Plan
        if: steps.check_rg.outputs.exists == 'false' # Ne planifie que si le groupe de ressources n'existe pas déjà
        working-directory: ./terraform
        run: |
          terraform plan -out=tfplan \
            -var="localisation=${{ github.event.inputs.localisation }}" \
            -var="nomRessource=${{ github.event.inputs.nomRessource }}"

      - name: Deploy if approved
        if: steps.check_rg.outputs.exists == 'false' # Ne déploie que si le groupe de ressources n'existe pas déjà
        working-directory: ./terraform
        run: terraform apply -auto-approve tfplan
